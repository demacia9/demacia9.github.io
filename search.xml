<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux基本优化</title>
      <link href="/2023/09/26/Linux%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96/"/>
      <url>/2023/09/26/Linux%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="一、selinux和防火墙优化"><a href="#一、selinux和防火墙优化" class="headerlink" title="一、selinux和防火墙优化"></a>一、selinux和防火墙优化</h2><h3 id="1、SElinux"><a href="#1、SElinux" class="headerlink" title="1、SElinux"></a>1、SElinux</h3><p>selinux 安全增强型 Linux（Security-Enhanced Linux）简称 SELinux，它是一个 Linux 内核模块，也是 Linux 的一个安全子系统。SELinux 主要由美国国家安全局开发。它的主要 作用就是最大限度地减小系统中服务进程可访问的资源（最小权限原则）。也由于它的这个原则，导致我们很多操作无法正确的执行，所以对于初学者而言在会用selinux之前我们要把这个子系统关闭</p><p><strong>SELinux 的工作模式</strong></p><p>SELinux 有三种工作模式，分别是：</p><pre><code>- enforcing：强制模式。违反 SELinux 规则的行为将被阻止并记录到日志中。- permissive：宽容模式。违反 SELinux 规则的行为只会记录到日志中。一般为调试用。- disabled：关闭 SELinux。</code></pre><p><strong>SElinux工作模式设置方法</strong></p><ul><li>临时设置<br>enforcing 和 permissive 模式可以通过 setenforce 1|0 命令快速切换,重启系统后失效。</li><li>永久生效<br>SELinux 工作模式可以在 &#x2F;etc&#x2F;selinux&#x2F;config 中设定。</li></ul><pre><code>如果想从 disabled 切换到 enforcing 或者 permissive 的话，需要重启系统。反过来也一样。</code></pre><p>需要注意的是，如果系统已经在关闭 SELinux 的状态下运行了一段时间，在打开 SELinux 之后的第一次重启速度可能会比较慢。因为系统必须为磁盘中的文件创建安全上下文，我们现在来看一下如何关闭selinux，首先用root的身份登录系统，打开一个终端输入gedit &#x2F;etc&#x2F;selinux&#x2F;config命令，回车之后会打开一个文件，将所标记出来部分的enforcing改为disabled，保存之后重启linux系统</p><pre><code>[root@zutuanxue ~]# gedit /etc/selinux/config##/etc/selinux/config  内容# This file controls the state of SELinux on the system.# SELINUX= can take one of these three values:#     enforcing - SELinux security policy is enforced.#     permissive - SELinux prints warnings instead of enforcing.#     disabled - No SELinux policy is loaded.SELINUX=enforcing     #这里定义selinux是否为开启状态# SELINUXTYPE= can take one of these three values:#     targeted - Targeted processes are protected,#     minimum - Modification of targeted policy. Only selected processes are protected. #     mls - Multi Level Security protection.SELINUXTYPE=targeted   #这里定义的是selinux保护级别</code></pre><p>重启登录之后可以使用sestatus -v命令去查看是否成功，如果看到的状态不是disabled则需要重新操作</p><pre><code>[root@zutuanxue ~]# sestatus -vSELinux status:                 disabled</code></pre><h3 id="2、防火墙"><a href="#2、防火墙" class="headerlink" title="2、防火墙"></a>2、防火墙</h3><p>防火墙技术是通过有机结合各类用于安全管理与筛选的软件和硬件设备，帮助计算机网络于其内、外网之间构建一道相对隔绝的保护屏障，以保护用户资料与信息安全性的一种技术。 在CentOS8中使用firewalld作为防火墙，基于iptables的防火墙被默认不启动，但仍然可以继续使用。CentOS8中有几种防火墙共存：firewalld、iptables、ebtables等，默认使用firewalld作为防火墙，通过firewall-cmd工具来管理netfilter,不过底层调用的命令仍然是iptables，虽然防火墙是安全软件，但是它的一些默认设置会对初学者造成困扰，所以我们要先关闭firewalld。通过systemctl stop firewalld.service停止防火墙，systemctl disable firewalld.service禁止防火墙服务开机启动，接下来我们看一下如何设置中文</p><p><img src="https://www.zutuanxue.com:8000/static/media/images/2020/10/11/1602389727708.png" alt="1571044294838.png"></p><h2 id="二、中文设置优化"><a href="#二、中文设置优化" class="headerlink" title="二、中文设置优化"></a>二、中文设置优化</h2><p>我们在安装系统选择的是中文，但是我们系统当中并没有中文输入法，所以如果要想输入中文的话需要添加中文输入法，以root用户身份登录系统之后我们使用gedit &#x2F;etc&#x2F;yum.repos.d&#x2F;server.repo,输入如下内容保存退出，确保虚拟机的光驱中加载的是CentOS8的光盘镜像，并且已连接<br><img src="https://www.zutuanxue.com:8000/static/media/images/2020/10/11/1602389773586.png" alt="1571048414719.png"><br><img src="https://www.zutuanxue.com:8000/static/media/images/2020/10/11/1602389785159.png" alt="1571047694890.png"></p><p>设置完成之后执行mkdir命令建立目录，然后挂载光盘</p><p><img src="https://www.zutuanxue.com:8000/static/media/images/2020/10/11/1602389813049.png" alt="1571047821170.png"></p><p>光盘挂载完成之后执行输入法安装命令，如果只要拼音则安装的是： ibus-libpinyin.x86_64</p><pre><code># 安装所有支持的输入法[root@zutuanxue ~]# dnf install ibus* -y# 或者 精准安装拼音输入法[root@zutuanxue ~]#  dnf install ibus-libpinyin.x86_64 -y</code></pre><p>等待软件包安装完成之后重启系统然后重新登录</p><pre><code>如果不想重启系统可以使用[root@zutuanxue ~]# ibus restart 命令重启ibus-daemon进程来实现</code></pre><p><img src="https://www.zutuanxue.com:8000/static/media/images/2020/10/11/1602389829983.png" alt="1571048752409.png"></p><p>安装完成之后点击右上角的按钮然后点击设置</p><p><img src="https://www.zutuanxue.com:8000/static/media/images/2020/10/11/1602389850869.png" alt="1571048826875.png"></p><p>在新打开的窗口中找到语言，选择添加，选择汉语，然后选择一个适合自己的中文输入法点击添加之后就可以使用中文输入法了</p><p><img src="https://www.zutuanxue.com:8000/static/media/images/2020/10/11/1602389866470.png" alt="1571048904227.png"></p><p><img src="https://www.zutuanxue.com:8000/static/media/images/2020/10/11/1602389893147.png" alt="1571049215146.png"></p><p><img src="https://www.zutuanxue.com:8000/static/media/images/2020/10/11/1602389909572.png" alt="1571049244944.png"></p><p>输入法设置完成之后，我们来看下时间相关的设置</p><h2 id="三、网络时间服务器优化"><a href="#三、网络时间服务器优化" class="headerlink" title="三、网络时间服务器优化"></a>三、网络时间服务器优化</h2><p>如果系统的时间不准，自己手动设置起来比较麻烦，我们可以看下怎么来优化一下</p><p>同样还是找到设置，在里面找到详细信息，展开之后可以看到日期和时间的设置，两个自动设置的选项打开，如果你的虚拟机可以联网的话，过一会就会看到时间正常了</p><p><img src="https://www.zutuanxue.com:8000/static/media/images/2020/10/11/1602389925235.png" alt="1571049564017.png"></p><p><img src="https://www.zutuanxue.com:8000/static/media/images/2020/10/11/1602389936841.png" alt="1571049605979.png"><br><img src="https://www.zutuanxue.com:8000/static/media/images/2020/10/11/1602389949009.png" alt="1571049727212.png"></p><h2 id="四、自启动服务优化"><a href="#四、自启动服务优化" class="headerlink" title="四、自启动服务优化"></a>四、自启动服务优化</h2><p>自启动服务优化的方式类似我们之前提到的停止firewalld，但是首先我们要确认一下有哪些服务是开机启动的，然后利用之前用过的systemctl stop servername和systemctl disabled servername这两条命令停止相应的服务，比如说蓝牙服务和防火墙服务，但是各位需要注意的是，这里面所涉及的服务在你不了解的前提下不要乱停止，否则可能会导致系统功能失灵，甚至是崩溃<br><img src="https://www.zutuanxue.com:8000/static/media/images/2020/10/11/1602389969693.png" alt="1571050099841.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令与符号</title>
      <link href="/2023/09/26/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/"/>
      <url>/2023/09/26/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一、常用命令介绍"><a href="#一、常用命令介绍" class="headerlink" title="一、常用命令介绍"></a>一、常用命令介绍</h2><p>在linux系统中存在很多命令，这些命令可以帮助我们完成不同的工作，在这里面我们先介绍一些常用的基础命令，这些命令可以帮助我们完成对应的基本操作，随着以后的学习，我们还会接触到更多可以帮助我们完成不同工作的linux命令，我们来一起看一下这些基础命令都有哪些</p><p><strong>1、关机、重启命令</strong></p><p><strong>关机命令</strong></p><ul><li>init 0 #管理员可以使用</li><li>halt</li><li>shutdown -h</li><li>poweroff</li></ul><p><strong>重启命令</strong></p><ul><li>shutdown -r</li><li>reboot</li><li>shutdown -r</li></ul><p>强烈推荐：关机或重启命令及步骤</p><pre><code>1） sync：将缓冲区的数据同步到磁盘中(关机，重启前都需要执行，避免数据丢失)，在Linux系统中，当数据需要存入磁盘时，通常会先放到缓冲区内，等到适当的时刻再写入磁盘，如此可提高系统的执行效率2） shutdown： 以一种安全的方式关闭或重启系统。所有登陆用户都可以看到关机信息提示，并且禁止登陆    -k并非真正关机，只向所有人显示警告信息。        如：shutdown -k +5    -r重启。默认延迟一分钟        如：shutdown -r +3 &quot;shutdown in 3 minutes&quot;    -h关机。默认延迟一分钟        如：shutdown -h 12：00/shutdown -h now    -f重启时跳过磁盘检测。    -F重启时强制磁盘检测。    -c取消shutdown推荐理由：1、将内存中的数据刷入硬盘，避免因为重启或关机数据没有及时保存而丢失2、避免多用户使用突然某个用户强行关机，影响其他用户，使用shutdown关机和重启可以通知其他用户，给予缓冲时间</code></pre><p><strong>2、系统信息</strong></p><ul><li>uname</li></ul><pre><code>-s  输出内核名称-n  输出网络节点上的主机名-r  输出内核发行号-v  输出内核版本-m  输出主机的硬件架构名称-p  输出处理器类型或&quot;unknown&quot;-i输出硬件平台或&quot;unknown&quot;-o输出操作系统名称-a  以如下次序输出所有信息。其中若-p和-i的结果不可知则省略</code></pre><ul><li>hostname 查看主机名</li></ul><pre><code># hostnamectl set-hostname hello</code></pre><ul><li>date 查看和设置时间</li></ul><pre><code>时间方面：%n : 下一行%t : 跳格 tab%H : 小时(00..23)%I : 小时(01..12)%k : 小时(0..23)%l : 小时(1..12)%M : 分钟(00..59)%p : 显示本地 AM 或 PM%r : 直接显示时间 (12 小时制，格式为 hh:mm:ss [AP]M)%s : 从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数%S : 秒(00..60)%T : 直接显示时间 (24 小时制)%X : 相当于 %H:%M:%S%Z : 显示时区日期方面：%a : 星期几 (Sun..Sat)%A : 星期几 (Sunday..Saturday)%b : 月份 (Jan..Dec)%B : 月份 (January..December)%c : 直接显示日期与时间%d : 日 (01..31)%D : 直接显示日期 (mm/dd/yy)%h : 同 %b%j : 一年中的第几天 (001..366)%m : 月份 (01..12)%U : 一年中的第几周 (00..53) (以 Sunday 为一周的第一天的情形)%w : 一周中的第几天 (0..6)%W : 一年中的第几周 (00..53) (以 Monday 为一周的第一天的情形)%x : 直接显示日期 (yyyy-mm-dd)%y : 年份的最后两位数字 (00.99)%Y : 完整年份 (0000..9999)[root@zutuanxue ~]# date &#39;+%I%M%S&#39;025929[root@zutuanxue ~]# date &#39;+%r&#39;上午 02时59分49秒[root@zutuanxue ~]# date &#39;+%s&#39;1584428402[root@zutuanxue ~]# date &#39;+%Z&#39;EDT[root@zutuanxue ~]# date &#39;+%a&#39;二[root@zutuanxue ~]# date &#39;+%A&#39;星期二[root@zutuanxue ~]# date &#39;+%b&#39;3月[root@zutuanxue ~]# date &#39;+%B&#39;三月[root@zutuanxue ~]# date &#39;+%c&#39;2020年03月17日 星期二 03时01分36秒[root@zutuanxue ~]# date &#39;+%T%n%D&#39;03:03:3503/17/20[root@zutuanxue ~]# date &#39;+%T%t%D&#39;03:03:5803/17/20[root@zutuanxue ~]# date -s 2021-10-252021年 10月 25日 星期一 00:00:00 EDT[root@zutuanxue ~]# date -s 18:002021年 10月 25日 星期一 18:00:00 EDT[root@zutuanxue ~]# date -s 18:30:212021年 10月 25日 星期一 18:30:21 EDT[root@zutuanxue ~]# date -s &quot;2021-04-28 15:30:20&quot;2021年 04月 28日 星期三 15:30:20 EDT</code></pre><p><strong>3、文件和目录</strong></p><ul><li>cd 目录 进入目录</li><li>pwd： 查看当前的工作路径</li></ul><pre><code>-P显示实际位置-L显示所在位置[root@zutuanxue ~]# cd /etc     #进入到/etc这个目录[root@zutuanxue ~]# cd /[root@zutuanxue /]# lsbin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var[root@zutuanxue /]# cd bin/[root@zutuanxue bin]# pwd/bin[root@zutuanxue bin]# pwd -P/usr/bin[root@zutuanxue bin]# pwd -L/bin</code></pre><ul><li>ls： 查看当前目录下有哪些文件</li></ul><pre><code>-a 列出目录下的所有文件，包括以 . 开头的隐含文件。-A 显示除 “.”和“..”外的所有文件。-B 不输出以 “~”结尾的备份文件。-c 与lt一起使用，显示并按照修改时间（ctime）排序，与l一起使用，显示修改时间，按名称排序。-d 将目录象文件一样显示，而不是显示其下的文件。-f 对输出的文件不排序，使用此选项后aU选项生效，lst选项失效-F 在每个文件名后附上一个字符以说明该文件的类型，“*”表示可执行的普通文件；“/”表示目录；“@”表示符号链接；“|”表示FIFOs；“=”表示套接字(sockets)。-g 类似l但是不显示所有者-h 与l一起，以易于阅读的格式输出文件大小(例如 1K 234M 2G)-i 输出文件的i节点的索引信息。-k 以k字节的形式表示文件的大小。--si类似k但是以1000为进制而非1024-l 列出文件的详细信息。-L 遇到链接文件是，显示原文件的信息，而非链接信息-m 横向输出文件名，并以“，”作分格符。-n 类似l,但是用数字的 UID,GID 代替名称。-o 显示文件的除组信息外的详细信息。-p 目录后面加上/标识-q 用?代替不可输出的字符。-r 对目录反向排序。-s 在每个文件名后输出该文件的大小。-t 以修改时间排序。-u 与lt一起使用，以访问时间(atime)排序；与l一起使用显示访问时间，按照名称排序-x 按列输出，横向排序。-Q 把输出的文件名用双引号括起来。-R 列出所有子目录下的文件。-S 以文件大小排序。-X 以文件的扩展名(最后一个 . 后的字符)排序。-1 一行只输出一个文件。--color=no 不显示彩色文件名--help 在标准输出上显示帮助信息。--version 在标准输出上输出版本信息并退出。</code></pre><ul><li>mkdir 建立目录</li></ul><pre><code>-m设置权限模式(类似chmod)-p需要时创建目标目录的上层目录，但即使这些目录已存在也不当作错误处理-v每次创建新目录都显示信息-Z将每个创建的目录的SELinux 安全环境设置为CTX</code></pre><ul><li>rmdir 删除空文件夹</li></ul><pre><code>-p  递归删除空目录，从最后一个目录倒删</code></pre><ul><li>touch 建立文件</li></ul><pre><code>-a只更改访问时间-c不创建任何文件-m只更改修改时间-r使用指定文件的时间属性替代当前时间-t使用[[CC]YY]MMDDhhmm[.ss] 格式的时间替代当前时间[root@zutuanxue ~]# stat hello  文件：hello  大小：0         块：0          IO 块：4096   普通空文件设备：fd00h/64768dInode：34502264    硬链接：1权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)最近访问：2020-03-17 16:51:35.502961371 -0400最近更改：2020-03-17 16:51:35.502961371 -0400最近改动：2020-03-17 16:51:35.502961371 -0400创建时间：-[root@zutuanxue ~]# touch -a -t 202002010101.30 hello[root@zutuanxue ~]# stat hello  文件：hello  大小：0         块：0          IO 块：4096   普通空文件设备：fd00h/64768dInode：34502264    硬链接：1权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)最近访问：2020-02-01 01:01:30.000000000 -0500最近更改：2020-03-17 16:51:35.502961371 -0400最近改动：2020-03-17 16:51:53.143475189 -0400创建时间：-[root@zutuanxue ~]# touch -m -t 202002050101.30 hello[root@zutuanxue ~]# stat hello  文件：hello  大小：0         块：0          IO 块：4096   普通空文件设备：fd00h/64768dInode：34502264    硬链接：1权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)最近访问：2020-02-01 01:01:30.000000000 -0500最近更改：2020-02-05 01:01:30.000000000 -0500最近改动：2020-03-17 16:52:07.837453512 -0400创建时间：-#将hello-linux.txt的属性改成与anaconda-ks.cfg一样[root@zutuanxue ~]# stat hello-linux.txt   文件：hello-linux.txt  大小：12        块：8          IO 块：4096   普通文件设备：fd00h/64768dInode：34513350    硬链接：1权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)最近访问：2020-03-17 22:50:51.319377144 -0400最近更改：2020-03-17 22:50:45.909483733 -0400最近改动：2020-03-17 22:50:45.912483674 -0400创建时间：-[root@zutuanxue ~]# stat anaconda-ks.cfg   文件：anaconda-ks.cfg  大小：1378      块：8          IO 块：4096   普通文件设备：fd00h/64768dInode：34973658    硬链接：1权限：(0600/-rw-------)  Uid：(    0/    root)   Gid：(    0/    root)最近访问：2020-03-16 23:08:34.121427663 -0400最近更改：2020-02-04 15:01:33.273959663 -0500最近改动：2020-03-18 16:33:48.873881970 -0400创建时间：-[root@zutuanxue ~]# touch -r anaconda-ks.cfg hello-linux.txt [root@zutuanxue ~]# stat hello-linux.txt   文件：hello-linux.txt  大小：12        块：8          IO 块：4096   普通文件设备：fd00h/64768dInode：34513350    硬链接：1权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)最近访问：2020-03-16 23:08:34.121427663 -0400最近更改：2020-02-04 15:01:33.273959663 -0500最近改动：2020-03-18 18:22:48.694597233 -0400创建时间：-</code></pre><ul><li>cat 查看文件内容</li></ul><pre><code>-A等价于-vET-b对非空输出行编号-e      等价于-vE-E在每行结束处显示$-n对输出的所有行编号-s不输出多行空行-t与-vT等价-T将跳格字符（tab）显示为 ^I-v使用^和M</code></pre><ul><li>rm 删除文件或目录</li></ul><pre><code>-f强制删除。忽略不存在的文件，不提示确认-i在删除前需要确认-I超过三个文件或者递归删除前要求确认。比-i提示内容更少-d删除空目录-r递归删除目录及其内容</code></pre><p>这些命令都是初学者可能会经常用到的，大家可以在自己的虚拟机上练习一下</p><ul><li>cp 拷贝</li></ul><pre><code>-i覆盖前询问(使前面的 -n 选项失效)-n不要覆盖已存在的文件(使前面的 -i 选项失效)-R, -r, --recursive递归复制目录及其子目录内的所有内容-s只创建符号链接而不复制文件-f强制，将目标文件无法打开则将其移除并重试</code></pre><ul><li>mv 移动&#x2F;改名</li></ul><pre><code>-f覆盖前不询问-i覆盖前询问-n不覆盖已存在文件#如果您指定了-i、-f、-n 中的多个，仅最后一个生效。</code></pre><h2 id="二、常用符号"><a href="#二、常用符号" class="headerlink" title="二、常用符号"></a>二、常用符号</h2><pre><code>*任意字符串?任意字符/路径间隔符~当前用户的家目录管理员家目录为/root，其它用户的家目录在/home/用户名</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/21/hello-world/"/>
      <url>/2023/09/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
